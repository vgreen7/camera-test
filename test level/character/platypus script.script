local platypus = require "platypus.platypus"
local input = require "in.state"
local input_mapper = require "in.mapper"

local LEFT = hash("left")

--local CAMERA_ID = hash("/camera")

local TOGGLE_DEBUG = hash("toggle_debug")
local RIGHT = hash("right")
local JUMP = hash("jump")

function init(self)


	input.acquire()
	input_mapper.bind(input_mapper.KEY_LEFT, LEFT)
	input_mapper.bind(input_mapper.KEY_RIGHT, RIGHT)
	input_mapper.bind(input_mapper.KEY_SPACE, JUMP)
	input_mapper.bind(input_mapper.KEY_1, TOGGLE_DEBUG)

	msg.post("camera", "deadzone", { left = 50, right = 50, bottom = 10, top = 200 })
	

	self.platypus = platypus.create({
		collisions = {
			--separation = platypus.SEPARATION_RAYS,
			separation = platypus.SEPARATION_SHAPES,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_DOWN,
				[hash("onewaydoor")] = platypus.DIR_LEFT,
			},
			left = 15, right = 24, top = 60, bottom = 10,
		},
		gravity = -950,
		max_velocity = 780,
		allow_double_jump = true,
		allow_wall_jump = true
	})
end

function update(self, dt)
	self.platypus.update(dt)
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message, sender)
	if message_id == platypus.GROUND_CONTACT then
		print("Ground contact")
	elseif message_id == platypus.WALL_CONTACT then
		print("Wall contact")
	elseif message_id == platypus.FALLING then
		print("Falling")
	elseif message_id == platypus.WALL_JUMP then
		sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.platypus.left(250)
		
	elseif action_id == hash("right") then
		self.platypus.right(250)
	
elseif action_id == TOGGLE_DEBUG and action.released then
	self.platypus.toggle_debug()
	msg.post("@system:", "toggle_physics_debug")
end
if action_id == hash("jump") then
	if action.pressed then
		self.platypus.jump(800)
	elseif action.released then
		self.platypus.abort_jump(0.5)
	end
end


end
